Use return value of dragStart to indicate if drag works.

Add a right click context menu.

Modify cursor placement so it uses depth value if depth value is not infinite.
Add option to snap view to something or other, probably in camera control
window. Camera control needs to become an OptionBox, and needs to be
coordinated by the core object (currently called MainWindow).

General problem with render context and textures - apogee code tends to
assume there is only one, and changes are planned for resizing, but
not creating multiple contexts.

Can we make an assumption about the horizontal field of view typically
used by most users? If so, we can look at the window size as a proportion,
and adjust the projection's field of view accordingly.

Add option to control camera using joystick.

Interface thoughts - left button should be proactive, so middle button
should probably pan or rotate like either gimp or blender. I putting a menu
on the right button too much of a loss of useful buttons?

Abstract the stuff that is currently top level windows to be vbox widgets,
and allow them to be reparented around in generic toolbar windows, or
the main window, or something else. To make this work, we then really need
to be able to store the UI configuration a user likes.

Use Window::set_geometry_hints to control resizing of main window,
then use resizing of tables to make buttons flow like in gimp.

Implement a stack of operation descriptors per Mode/Layer which provide
information for undoing.

Fix up Mercator point modification behavoir.

Implement the world size.

Parameterise the terrain heightmap code so it is no longer locked to 200x200.

Vision shift: Aim to create a useful tool for game developers generally.

Sort out the ui bugs. Think about how we should handle the terrain.
Re-work rendering options so that they work per-layer. This also applies to visibility
of layers, and probably layer order should be removed.

Sort out the ui bugs.

Add doted line to insert cursor to show its height.

Re-work the scrolling code so it scrolls round a dynamic world size, and
handles scrolling from the users perspective.

Make all the windows implement delete_event_impl() so they don't get deleted.

Add clipentry base class, which Layer classes have an associated derived
type to store stuff they copy and cut.

Add capabilty to select existing avatar/character in the connection window.

Add way for admin account to make sure it moves its avatar in such a
way that it gets appearance/disappearance ops.

Make common base for entity based layers.

What NOW!?

No ideas. Semantic maps? tile maps? concentrate on apogee?
Is this all a bunch of arse?

Prabably best to try and get an editor which can edit and produce decent
tile maps, heightmaps, and entity maps.

Investigate call of ->getID() on null pointer from ServerEntities.cpp:378

Fix cyphesis so the creator can perceive the world.

Fix move code so that it sets the ref correctly.

Pad out manipulation of entities, including moving and deleting. Resizing
can come later.

Switch to using drag and drop support in gtk-- to handle dragging.

Connection code, once complete needs custom op handler, which allows
construction of arbitrary ops. This window should allow selection of
various server subsystems as FROM of op, and also offer options for TO.

Add to the gimp interface.

Look into the possibility of a gimp like client lib for extensions.

Make a component which creates graphics for 2d client from 3d models.

Implement proper X dnd and selection using X primary selection and clipboard.

dnl Initialise autoconf

AC_INIT(app/equator.cpp)
AM_CONFIG_HEADER(config.h)

dnl Versions required
GDKGLEXT_PKG=gdkglext-0.x
GDKGLEXT_REQUIRED_VERSION=0.4.1
AC_SUBST(GDKGLEXT_REQUIRED_VERSION)

GTKGLEXT_PKG=gtkglext-0.x
GTKGLEXT_REQUIRED_VERSION=0.4.1
AC_SUBST(GTKGLEXT_REQUIRED_VERSION)

GDKMM_PKG=gdkmm-2.0
GDKMM_REQUIRED_VERSION=1.3.17
AC_SUBST(GDKMM_REQUIRED_VERSION)

GTKMM_PKG=gtkmm-2.0
GTKMM_REQUIRED_VERSION=1.3.17
AC_SUBST(GTKMM_REQUIRED_VERSION)

GDKGLEXTMM_PKG=gdkglextmm-0.x
GDKGLEXTMM_REQUIRED_VERSION=0.4.1
AC_SUBST(GDKGLEXTMM_REQUIRED_VERSION)

GTKGLEXTMM_PKG=gtkglextmm-0.x
GTKGLEXTMM_REQUIRED_VERSION=0.4.1
AC_SUBST(GTKGLEXTMM_REQUIRED_VERSION)

dnl Initialise automake

AM_INIT_AUTOMAKE(equator, 0.0.2)

AM_MAINTAINER_MODE

dnl Need libtool

AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

dnl Test for C++ compiler

AC_PROG_CC
AC_PROG_CXX

PKG_CHECK_MODULES(BASE_DEPENDENCIES,
$GDKGLEXT_PKG >= $GDKGLEXT_REQUIRED_VERSION \
$GTKGLEXT_PKG >= $GTKGLEXT_REQUIRED_VERSION \
$GDKMM_PKG >= $GDKMM_REQUIRED_VERSION \
$GTKMM_PKG >= $GTKMM_REQUIRED_VERSION \
$GDKGLEXTMM_PKG >= $GDKGLEXTMM_REQUIRED_VERSION \
$GTKGLEXTMM_PKG >= $GTKGLEXTMM_REQUIRED_VERSION \
)

CXXFLAGS="$CXXFLAGS -Wall -g"

LIBS="$LIBS `$PKG_CONFIG --libs $GDKGLEXT_PKG $GTKGLEXT_PKG $GDKMM_PKG $GTKMM_PKG $GDKGLEXTMM_PKG $GTKGLEXTMM_PKG`"
CXXFLAGS="$CXXFLAGS `$PKG_CONFIG --cflags $GDKGLEXT_PKG $GTKGLEXT_PKG $GDKMM_PKG $GTKMM_PKG $GDKGLEXTMM_PKG $GTKGLEXTMM_PKG`"

SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION)
CFLAGS="$CFLAGS $SDL_CFLAGS"
CPPFLAGS="$CPPFLAGS $SDL_CFLAGS"
CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"
LIBS="$LIBS $SDL_LIBS"

dnl AM_PATH_GTK(1.2.0,,AC_MSG_ERROR([Cannot find proper gtk version]))
dnl AM_PATH_GTKMM(1.1.7,,AC_MSG_ERROR([Cannot find proper gtk-- version]))
dnl GTKMM_PROC=`$GTKMM_CONFIG --proc`
dnl AC_SUBST(GTKMM_PROC)
dnl CPPFLAGS="$CPPFLAGS $GTKMM_CFLAGS"
dnl LDFLAGS="$LDFLAGS $GTKMM_LIBS"

ATLAS_VERSION=0.4.3
AM_PATH_ATLAS($ATLAS_VERSION)
CFLAGS="$CFLAGS $ATLAS_CFLAGS"
CPPFLAGS="$CPPFLAGS $ATLAS_CFLAGS"
CXXFLAGS="$CXXFLAGS $ATLAS_CFLAGS"
LIBS="$LIBS $ATLAS_LIBS"

AC_CHECK_LIB(SDL_image,IMG_Load)
AC_CHECK_LIB(GL,glViewport)
AC_CHECK_LIB(GLU,gluPerspective)

LIBXML_CHECK
CPPFLAGS="$CPPFLAGS $LIBXML_CFLAGS"
CXXFLAGS="$CXXFLAGS $LIBXML_CFLAGS"
LIBS="$LIBS $LIBXML_LIBS"

dnl AM_PATH_SIGC(1.0.2,,AC_MSG_ERROR(Couldn't find libsigc++))
dnl CPPFLAGS="$CPPFLAGS $SIGC_CFLAGS"
dnl LDFLAGS="$LDFLAGS $SIGC_LIBS"

AC_LANG_CPLUSPLUS
AC_REQUIRE_CPP

dnl AC_CHECK_LIB(coal,main)
dnl AC_CHECK_LIB(coalblade,main)
dnl AC_CHECK_LIB(coaliso,main)
dnl AC_CHECK_LIB(gtkgl,main)
dnl AC_CHECK_LIB(gtkglmm,main)
dnl AC_CHECK_LIB(wfmath,main)

WF_CHECK_COAL(0.3.0)
CXXFLAGS="$CXXFLAGS $COAL_CFLAGS"
LIBS="$LIBS $COAL_LIBS"

dnl These checks have to go after we add COAL_LIBS,
dnl so we catch any -L flags
AC_CHECK_LIB(coalblade,main)
AC_CHECK_LIB(coaliso,main)
LIBS="$LIBS -lcoalblade -lcoaliso"

AM_PATH_WFMATH(0.2.8,
    [
      CXXFLAGS="$CXXFLAGS $WFMATH_CFLAGS"
      LIBS="$LIBS $WFMATH_LIBS"
    ],
    [
      AC_MSG_ERROR(Couldn't find wfmath)
    ])

AM_PATH_SKSTREAM(0.2.0, 
    [
	dnl CXXFLAGS="$CXXFLAGS $SKSTREAM_CFLAGS"
	LIBS="$LIBS $SKSTREAM_LIBS"
    ])
dnl    ], 
dnl    AC_MSG_ERROR(Couldn't find skstream))
	
AM_PATH_ERIS(0.9.0,
    [
	CXXFLAGS="$CXXFLAGS $ERIS_CFLAGS"
	LIBS="$LIBS $ERIS_LIBS"
    ])
dnl    ],
dnl    AC_MSG_ERROR(Couldn't find eris))

dnl AC_CHECK_LIB(efence,main)
dnl AC_CHECK_LIB(cyphesis,main)

dnl AM_PATH_GIMP(1.2.0,
dnl     [
dnl         AC_DEFINE(BUILD_AS_GIMP_PLUGIN)
dnl         CPPFLAGS="$CPPFLAGS $GIMP_CFLAGS"
dnl         CXXFLAGS="$CXXFLAGS $GIMP_CFLAGS"
dnl         LIBS="$LIBS $GIMP_LIBS"
dnl     ],
dnl     AC_MSG_RESULT(Gimp library not found. Equator will be build as a stand alone app only, and no imaging editing features will be available))
dnl AC_SUBST(GIMP_PLUGIN_DIR)

dnl Generate files
AC_OUTPUT([
	Makefile
	app/Makefile
])
